// <auto-generated />
using System;
using InterviewPanelAvailabilitySystemAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewPanelAvailabilitySystemAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240715121951_SeedInterviewRounds")]
    partial class SeedInterviewRounds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InterviewRoundId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecruiter")
                        .HasColumnType("bit");

                    b.Property<int?>("JobRoleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("InterviewRoundId");

                    b.HasIndex("JobRoleId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.InterviewRounds", b =>
                {
                    b.Property<int>("InterviewRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewRoundId"), 1L, 1);

                    b.Property<string>("InterviewRoundName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterviewRoundId");

                    b.ToTable("InterviewRound");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.InterviewSlots", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesEmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SlotDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeslotId")
                        .HasColumnType("int");

                    b.HasKey("SlotId");

                    b.HasIndex("EmployeesEmployeeId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("InterviewSlot");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.JobRole", b =>
                {
                    b.Property<int>("JobRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobRoleId"), 1L, 1);

                    b.Property<string>("JobRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobRoleId");

                    b.ToTable("JobRole");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.Timeslot", b =>
                {
                    b.Property<int>("TimeslotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeslotId"), 1L, 1);

                    b.Property<string>("TimeslotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeslotId");

                    b.ToTable("Timeslot");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.Employees", b =>
                {
                    b.HasOne("InterviewPanelAvailabilitySystemAPI.Models.InterviewRounds", "InterviewRound")
                        .WithMany("Employees")
                        .HasForeignKey("InterviewRoundId");

                    b.HasOne("InterviewPanelAvailabilitySystemAPI.Models.JobRole", "JobRole")
                        .WithMany("Employees")
                        .HasForeignKey("JobRoleId");

                    b.Navigation("InterviewRound");

                    b.Navigation("JobRole");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.InterviewSlots", b =>
                {
                    b.HasOne("InterviewPanelAvailabilitySystemAPI.Models.Employees", "Employees")
                        .WithMany("InterviewSlots")
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewPanelAvailabilitySystemAPI.Models.Timeslot", "Timeslot")
                        .WithMany("InterviewSlots")
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.Employees", b =>
                {
                    b.Navigation("InterviewSlots");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.InterviewRounds", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.JobRole", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("InterviewPanelAvailabilitySystemAPI.Models.Timeslot", b =>
                {
                    b.Navigation("InterviewSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
