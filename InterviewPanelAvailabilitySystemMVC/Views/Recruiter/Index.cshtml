@using InterviewPanelAvailabilitySystemMVC.ViewModels
@model List<InterviewSlotsViewModel>
<div class="text-center">
    <h2>Book available time slots</h2>
</div>
<partial name="_RecruiterPartialView" />

@{
    var jobRoles = ViewBag.JobRoles as List<JobRoleViewModel>;
    var interviewRounds = ViewBag.InterviewRound as List<InterviewRoundViewModel>;
    string search = ViewBag.Search;
    bool isSearchActive = !string.IsNullOrEmpty(search);
    int? interviewRoundId = ViewBag.InterviewRoundId;
    int? jobRoleId = ViewBag.JobRoleId;
}



<div>
    <table class="table table-striped text-center">
        <thead class="thead-dark">
            <tr>
                <th></th>
                <th style="cursor: pointer" onclick="changePage(1, '@ViewBag.PageSize', '!@ViewBag.SortOrder','@ViewBag.Search')">
                    First Name
                    @if (ViewBag.SortOrder == "asc")
                    {
                        <i class="fas fa-sort-amount-up"></i>
                    }
                    else
                    {
                        <i class="fas fa-sort-amount-down"></i>
                    }
                </th>

                <th>Job Role</th>
                <th>Interview Round</th>
                <th>Date</th>
                <th>Available Time Slot</th>
            </tr>
        </thead>
        @if (Model == null || Model.Count == 0)
        {
            <tbody>
                <tr>
                    <td colspan="7" class="text-center">No records found</td>
                </tr>
            </tbody>
        }
        else
        {
            <tbody>
                @foreach (var user in Model)
                {
                    <tr>

                        <td>

                            <a href="@Url.Action("UpdateInterviewSlot", "Recruiter", new { slotId = user.SlotId })" class="btn civicaBtn green-button"> Select</a>
                        </td>
                        <td>@user.Employee.FirstName @user.Employee.LastName</td>
                        <td>@user.Employee.JobRole.JobRoleName</td>
                        <td>@user.Employee.InterviewRound.InterviewRoundName</td>
                        @* <td>@user.SlotDate</td> *@
                        <script>
                            var date = new Date('@user.SlotDate');
                            var options = { day: 'numeric', month: 'long', year: 'numeric' };
                            document.write("<td>" + date.toLocaleDateString("en-US", options) + "</td>");
                        </script>

                        <td>
                            @user.Timeslot.TimeslotName
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>

@if (Model.Count > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-4">
        <!-- Pagination -->
        <ul class="pagination align-items-center">
            <li class="page-item @(ViewBag.Page <= 1 ? "disabled" : "")">
                <a class="page-link" onclick="changePage(1, '@ViewBag.PageSize', '@ViewBag.SortOrder', '@search')" aria-label="First">
                    <span aria-hidden="true"><i class="fa-solid fa-angles-left"></i></span>
                </a>
            </li>
            <li class="page-item @(ViewBag.Page <= 1 ? "disabled" : "")">
                <a class="page-link" onclick="changePage('@(ViewBag.Page - 1)', '@ViewBag.PageSize', '@ViewBag.SortOrder','@search')" aria-label="Previous">
                    <span aria-hidden="true"><i class="fas fa-chevron-left"></i></span>
                </a>
            </li>

            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(ViewBag.Page == i ? "active" : "")">
                    <a class="page-link" onclick="changePage('@i', '@ViewBag.PageSize', '@ViewBag.SortOrder','@ViewBag.Search')">@i</a>

                </li>
            }


            <li class="page-item @(ViewBag.Page >= ViewBag.TotalPages ? "disabled" : "")">
                <a class="page-link" onclick="changePage('@(ViewBag.Page + 1)', '@ViewBag.PageSize', '@ViewBag.SortOrder','@search')" aria-label="Next">
                    <span aria-hidden="true"><i class="fas fa-chevron-right"></i></span>
                </a>
            </li>
            <li class="page-item @(ViewBag.Page >= ViewBag.TotalPages ? "disabled" : "")">
                <a class="page-link" onclick="changePage(@ViewBag.TotalPages, '@ViewBag.PageSize', '@ViewBag.SortOrder', '@search')" aria-label="Last">
                    <span aria-hidden="true"><i class="fa-solid fa-angles-right"></i></span>
                </a>
            </li>
        </ul>

        <!-- Page size dropdown -->
        <div>
            <label class="m-2" for="pageSize"><i class="fas fa-list mr-1"></i> Page Size:</label>
            <select id="pageSize" onchange="changePageSize(this)" class="form-control pcursor text-center">
                <option value="2">2</option>
                <option value="4">4</option>
                <option value="6">6</option>
            </select>

        </div>

    </div>
}
<style>

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px; /* Add margin top for spacing */
        margin-bottom: 20px; /* Add margin bottom for spacing */
    }

        .pagination li {
            list-style-type: none; /* Remove default list styling */
        }

        .pagination .page-link {
            color: #7b57cb; /* Default link color */
            background-color: transparent;
            border: 1px solid #7b57cb; /* Add border */
            cursor: pointer;
            transition: color 0.3s, background-color 0.3s, border-color 0.3s; /* Smooth transition */
            padding: 0.5rem 0.75rem; /* Padding for the link */
            border-radius: 0.25rem; /* Rounded corners */
        }

            .pagination .page-link:hover {
                color: #7b57cb; /* Darker blue color on hover */
                text-decoration: none; /* Remove underline on hover */
                border-color: #adb5bd; /* Adjust border color on hover */
            }

        .pagination .page-item.disabled .page-link {
            color: #a5a2a2; /* Faded text color for disabled buttons */
            pointer-events: none; /* Disable pointer events for disabled buttons */
            background-color: #e9ecef;
        }

        .pagination .page-item.active .page-link {
            background-color: #7b57cb; /* Active page background color */
            color: #fff; /* Active page text color */
            border-color: #7b57cb; /* Active page border color */
            cursor: pointer;
        }

    .page-size-selection {
        display: flex;
        align-items: center;
        margin-top: 10px; /* Adjust margin top */
    }

        .page-size-selection select {
            margin-left: 10px; /* Add some spacing between the label and the select */
        }

    .custom-select {
        border: 1px solid #ced4da; /* Add border */
        padding: 0.375rem 2rem 0.375rem 1rem; /* Add padding */
        font-size: 1rem; /* Set font size */
        border-radius: 0.25rem; /* Add border radius */
        background-color: #fff; /* Set background color */
        background-image: none; /* Remove background image */
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; /* Add transition */
    }

        .custom-select:focus {
            border-color: #80bdff; /* Set border color on focus */
            outline: 0; /* Remove outline */
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Add box shadow on focus */
        }

    .table {
        margin-top: 20px; /* Add margin top for spacing */
    }

    /* Pagination buttons */
    .pagination ul li.disabled a {
        background-color: #fff; /* Light background color */
        color: #6c757d; /* Text color */
    }

        /* Font Awesome arrows */
        .pagination ul li.disabled a i {
            color: #6c757d; /* Adjust icon color */
        }

    .green-button {
        background-color: green;
        color: white;
        border: none;
    }
</style>

<script>

    // Initialize page size dropdown with current selected size
    document.addEventListener("DOMContentLoaded", function () {
        var currentPageSize = @(ViewBag.PageSize);
        var pageSizeDropdown = document.getElementById("pageSize");
        for (var i = 0; i < pageSizeDropdown.options.length; i++) {
            if (pageSizeDropdown.options[i].value === currentPageSize.toString()) {
                pageSizeDropdown.selectedIndex = i;
                break;
            }
        }
    });
    function changePage(page, pageSize, sortOrder, search) {
         if (sortOrder == '!asc') {
            sortOrder = 'desc';
        }
        if (sortOrder == '!desc') {
            sortOrder = 'asc';
        }
        var interviewRoundId = @(ViewBag.InterviewRoundId ?? "null");
        var jobRoleId = @(ViewBag.JobRoleId ?? "null");

        window.location.href = "/Recruiter" +
            "?jobRoleId=" + jobRoleId +
            "&interviewRoundId=" + interviewRoundId +
            "&search=" + search +
            "&page=" + page +
            "&pageSize=" + pageSize +
            "&sort=" + sortOrder;
    }
   

    // Function to handle page size change
    function changePageSize(select) {
        var interviewRoundId = @(ViewBag.InterviewRoundId ?? "null");
        var jobRoleId = @(ViewBag.JobRoleId ?? "null");
        var page = @(ViewBag.Page);
        var pageSize = select.value;
        var sortOrder = '@ViewBag.SortOrder';
        var search = '@ViewBag.Search';

        window.location.href = "/Recruiter" +
            "?jobRoleId=" + jobRoleId +
            "&interviewRoundId=" + interviewRoundId +
            "&search=" + search +
            "&page=" + page +
            "&pageSize=" + pageSize +
            "&sort=" + sortOrder;
    }

</script>

